# Optional PyHook utils import
# Has to be used to import external (OS) modules
# Should be used to build/read settings values and for resolving resources paths
# Check docstrings for more informations
from pipeline_utils import *

# Optional numpy import from PyHook frozen bundle
import numpy as np

# External (OS) modules have to be imported in 'with use_local_python() block'.
# Example:
# with use_local_python():
#     import module
#     import otherModule
#     from module import xyz
# IMPORTANT
# Create pip requirements file for additional modules to be installed
# Preferred name: "pipeline_file.requirements.txt"

# To fake modules e.g. for loading torch models with torch.load(...)
# use 'with use_fake_modules(fake_modules_dict) block'.
# This will map fake modules into sys.modules so they will be available
# in given code block.
# Fake modules dictionary has following structure:
# fake_modules_dict = {
#     "full.module.path": {
#         "some_var_or_func": 0
#     },
#     "other_module": {
#         "some_var_or_func": 0
#     }
# }

name = "Pipeline name up to 64 characters"
# OPTIONAL
# Version string up to 12 characters.
version = "0.0.1"
# OPTIONAL
desc = "Pipeline description up to 512 characters."
# OPTIONAL
# List of supported Python platforms. Supported values 32 and 64 for respective bit version.
# If not provided default value of [32, 64] will be used.
supports = [32, 64]

# OPTIONAL
# Variables that pipeline can use.
# Contains up to 10 variables, use utils to create variable data.
settings = {  # Util method to build variable.
    # Needs values in order: initial, min, max, step (for slider).
    # Supports bool, int and float.
    # For bool set None value for min, max and step [see below 'Bool example'].
    # For combo box use %COMBO[labels_comma_separated]Tooltip format in tooltip.
    # Combo box is treated as int selection - selected index will be returned, counted from 0.
    "Label up to 32 characters": build_variable(1, 0, 10, 1, "Variable tooltip up to 256 characters."),
    "Bool example": build_variable(False, None, None, None, "Test bool variable."),
    "Int example": build_variable(1, 0, 10, 1, "Test int variable."),
    "Float example": build_variable(1.0, 0.0, 10.0, 1.0, "Test float variable."),
    "Combo example": build_variable(0, 1, 3, 1, "%COMBO[Label1,Label2,Label3]Tooltip for whole combo."),
}

# OPTIONAL
# Number of passes per frame processing
# Multistage pipelines can change frame shape but on the last pass it has to be restored to original shape.
# If multistage is set to > 1 pipeline has to implement on_frame_process_stage instead of on_frame_process.
multistage = 1


# OPTIONAL
def before_change_settings(key: str, value: float) -> None:
    # Called right before the settings change.
    # Check which variable will be changed with 'key'.
    # New value will be supplied here as float, so parse it respectively to bool or int if needed.
    # Should reinit all objects connected to given 'key'.
    pass


# OPTIONAL
def after_change_settings(key: str, value: float) -> None:
    # Called right after the settings change.
    # Check which variable was changed with 'key'.
    # New value will be supplied here as float, so parse it respectively to bool or int if needed.
    # Should reinit all objects connected to given 'key'.
    pass


# OPTIONAL
def on_load() -> None:
    # Should initialize all necessary objects for processing.
    pass


# Only for multistage == 1 or not set
def on_frame_process(frame: np.array, width: int, height: int, frame_num: int) -> np.array:
    # Should process frame.
    # Frame array shape has to remain unchanged after processing.
    # Array has to be 3-D with height, width, channels as dimensions.
    # Array has to contains uint8 values.
    return frame


# Only for multistage > 1
def on_frame_process_stage(frame: np.array, width: int, height: int, frame_num: int, stage: int) -> np.array:
    # Should process frame.
    # Array has to be 3-D with height, width, channels as dimensions.
    # Array has to contains uint8 values.
    # Frame array shape has to remain unchanged after last stage.
    if stage == 1:  # Stages are count from 1
        # During stage frame shape can be affected!
        return frame
    if stage == 2:
        return frame
    # During final stage frame shape must be restored!
    return frame


# OPTIONAL
def on_unload() -> None:
    # Should destroy all necessary objects for processing
    pass
